// Generated by dsl::codegen from IR
#![allow(dead_code)]

#[derive(Clone, Debug, PartialEq)]
pub struct User {
  pub id: String,
  pub age: u64,
  pub email: String,
  pub rating: u64,
}

#[derive(Clone, Debug, PartialEq)]
pub struct GlobalTimeoutMsg {
  pub sec: u64,
}

#[derive(Clone, Debug, PartialEq)]
pub struct UserManagerGetUserMsg {
  pub key: String,
}

#[derive(Clone, Debug, Default, PartialEq)]
pub struct GlobalHeap {
}

#[derive(Clone, Debug, Default, PartialEq)]
pub struct SocialScoreHeap {
}

#[derive(Clone, Debug, Default, PartialEq)]
pub struct UserManagerHeap {
  pub users: std::collections::HashMap<String, User>,
}

#[derive(Clone, Debug)]
pub enum Heap {
  Global(GlobalHeap),
  SocialScore(SocialScoreHeap),
  UserManager(UserManagerHeap),
}

#[derive(Clone, Debug, PartialEq)]
pub enum State {
  Completed,
  Idle,
  GlobalAddEntry,
  GlobalFactorialEntry,
  GlobalFactorialFactorialCall,
  GlobalFactorialMultiply,
  GlobalFactorialReturn,
  GlobalFactorialReturn1,
  GlobalFactorialSubtract,
  GlobalMultEntry,
  GlobalRandGenEntry,
  GlobalSubEntry,
  SocialScoreIncrementCallAdd,
  SocialScoreIncrementCheckUser,
  SocialScoreIncrementDone,
  SocialScoreIncrementEntry,
  SocialScoreIncrementHaveUser,
  SocialScoreIncrementSelect,
  SocialScoreIncrementSetUser,
  SocialScoreIncrementTimeoutStart,
  SocialScoreIncrementUpdateUser,
  UserManagerGetEntry,
  UserManagerSetEntry,
}

#[derive(Clone, Debug, PartialEq)]
pub enum Value {
  GlobalAddParamA(u64),
  GlobalAddParamB(u64),
  GlobalAddReturn(u64),
  GlobalFactorialParamN(u64),
  GlobalFactorialLocalFacCallRes(u64),
  GlobalFactorialLocalResult(u64),
  GlobalFactorialLocalSubtractRes(u64),
  GlobalFactorialReturn(u64),
  GlobalMultParamA(u64),
  GlobalMultParamB(u64),
  GlobalMultReturn(u64),
  GlobalRandGenReturn(u64),
  GlobalSubParamA(u64),
  GlobalSubParamB(u64),
  GlobalSubReturn(u64),
  SocialScoreIncrementParamUserId(String),
  SocialScoreIncrementLocalNewRating(u64),
  SocialScoreIncrementLocalUpdatedUser(User),
  SocialScoreIncrementLocalUser(User),
  SocialScoreIncrementLocalUserOpt(Option<User>),
  SocialScoreIncrementReturn(()),
  UserManagerGetParamKey(String),
  UserManagerGetReturn(Option<User>),
  UserManagerSetParamKey(String),
  UserManagerSetParamItem(User),
  UserManagerSetReturn(()),
  GlobalTimeoutFieldSec(u64),
  UserManagerGetUserFieldKey(String),
}


#[derive(Clone, Debug, PartialEq)]
pub enum StackEntry {
  State(State),
  Retrn(State),
  Value(Value),
}

#[derive(Clone, Debug, PartialEq)]
pub enum StepResult {
  Done,
  Next(Vec<StackEntry>),
  Sleep(u64, State),
  Write(String, State),
  GoTo(State),
  Branch { then_: State, else_: State },
  Select(Vec<State>),
  Return(Option<Value>),
  Todo(String),
}pub fn global_step(state: State, vars: &Vec<Value>, _heap: &mut Heap) -> StepResult {
  match state {
    State::Completed => StepResult::Done,
    State::Idle => panic!("shoudnt be here"),
    State::GlobalAddEntry => {
      let a: u64 = vars.iter().find_map(|v| if let Value::GlobalAddParamA(x) = v { Some(x.clone()) } else { None }).expect("Missing variable GlobalAddParamA on stack");
      let b: u64 = vars.iter().find_map(|v| if let Value::GlobalAddParamB(x) = v { Some(x.clone()) } else { None }).expect("Missing variable GlobalAddParamB on stack");
      StepResult::Return(Some(Value::GlobalAddReturn(a + b)))
    }
    State::GlobalFactorialEntry => {
      StepResult::GoTo(State::GlobalFactorialEntry)
    }
    State::GlobalFactorialFactorialCall => {
      let subtractRes: u64 = vars.iter().find_map(|v| if let Value::GlobalFactorialLocalSubtractRes(x) = v { Some(x.clone()) } else { None }).expect("Missing variable GlobalFactorialLocalSubtractRes on stack");
      StepResult::Next(vec![
        StackEntry::Retrn(State::GlobalFactorialMultiply),
        StackEntry::Value(Value::GlobalFactorialParamN(subtractRes)),
        StackEntry::State(State::GlobalFactorialEntry),
      ])
    }
    State::GlobalFactorialMultiply => {
      let facCallRes: u64 = vars.iter().find_map(|v| if let Value::GlobalFactorialLocalFacCallRes(x) = v { Some(x.clone()) } else { None }).expect("Missing variable GlobalFactorialLocalFacCallRes on stack");
      let n: u64 = vars.iter().find_map(|v| if let Value::GlobalFactorialParamN(x) = v { Some(x.clone()) } else { None }).expect("Missing variable GlobalFactorialParamN on stack");
      StepResult::Next(vec![
        StackEntry::Retrn(State::GlobalFactorialReturn),
        StackEntry::Value(Value::GlobalMultParamA(n)),
        StackEntry::Value(Value::GlobalMultParamB(facCallRes)),
        StackEntry::State(State::GlobalMultEntry),
      ])
    }
    State::GlobalFactorialReturn => {
      let result: u64 = vars.iter().find_map(|v| if let Value::GlobalFactorialLocalResult(x) = v { Some(x.clone()) } else { None }).expect("Missing variable GlobalFactorialLocalResult on stack");
      StepResult::Return(Some(Value::GlobalFactorialReturn(result)))
    }
    State::GlobalFactorialReturn1 => {
      StepResult::Return(Some(Value::GlobalFactorialReturn(1u64)))
    }
    State::GlobalFactorialSubtract => {
      let n: u64 = vars.iter().find_map(|v| if let Value::GlobalFactorialParamN(x) = v { Some(x.clone()) } else { None }).expect("Missing variable GlobalFactorialParamN on stack");
      StepResult::Next(vec![
        StackEntry::Retrn(State::GlobalFactorialFactorialCall),
        StackEntry::Value(Value::GlobalSubParamA(n)),
        StackEntry::Value(Value::GlobalSubParamB(1u64)),
        StackEntry::State(State::GlobalSubEntry),
      ])
    }
    State::GlobalMultEntry => {
      let a: u64 = vars.iter().find_map(|v| if let Value::GlobalMultParamA(x) = v { Some(x.clone()) } else { None }).expect("Missing variable GlobalMultParamA on stack");
      let b: u64 = vars.iter().find_map(|v| if let Value::GlobalMultParamB(x) = v { Some(x.clone()) } else { None }).expect("Missing variable GlobalMultParamB on stack");
      StepResult::Return(Some(Value::GlobalMultReturn(a * b)))
    }
    State::GlobalRandGenEntry => {
      StepResult::GoTo(State::GlobalRandGenEntry)
    }
    State::GlobalSubEntry => {
      let a: u64 = vars.iter().find_map(|v| if let Value::GlobalSubParamA(x) = v { Some(x.clone()) } else { None }).expect("Missing variable GlobalSubParamA on stack");
      let b: u64 = vars.iter().find_map(|v| if let Value::GlobalSubParamB(x) = v { Some(x.clone()) } else { None }).expect("Missing variable GlobalSubParamB on stack");
      StepResult::Return(Some(Value::GlobalSubReturn(a - b)))
    }
    State::SocialScoreIncrementEntry => {
      StepResult::GoTo(State::SocialScoreIncrementEntry)
    }
    State::SocialScoreIncrementCallAdd => {
      let user: User = vars.iter().find_map(|v| if let Value::SocialScoreIncrementLocalUser(x) = v { Some(x.clone()) } else { None }).expect("Missing variable SocialScoreIncrementLocalUser on stack");
      StepResult::Next(vec![
        StackEntry::Retrn(State::SocialScoreIncrementUpdateUser),
        StackEntry::Value(Value::GlobalAddParamA((user).rating)),
        StackEntry::Value(Value::GlobalAddParamB(1u64)),
        StackEntry::State(State::GlobalAddEntry),
      ])
    }
    State::SocialScoreIncrementCheckUser => {
      let userOpt: Option<User> = vars.iter().find_map(|v| if let Value::SocialScoreIncrementLocalUserOpt(x) = v { Some(x.clone()) } else { None }).expect("Missing variable SocialScoreIncrementLocalUserOpt on stack");
      StepResult::Branch { then_: State::SocialScoreIncrementHaveUser, else_: State::SocialScoreIncrementDone }
    }
    State::SocialScoreIncrementDone => {
      StepResult::Return(None)
    }
    State::SocialScoreIncrementHaveUser => {
      let userOpt: Option<User> = vars.iter().find_map(|v| if let Value::SocialScoreIncrementLocalUserOpt(x) = v { Some(x.clone()) } else { None }).expect("Missing variable SocialScoreIncrementLocalUserOpt on stack");
      StepResult::Next(vec![
        StackEntry::Value(Value::SocialScoreIncrementLocalUser((userOpt).unwrap())),
        StackEntry::State(State::SocialScoreIncrementCallAdd),
      ])
    }
    State::SocialScoreIncrementSelect => {
      StepResult::Select(vec![State::SocialScoreIncrementCheckUser, State::SocialScoreIncrementDone])
    }
    State::SocialScoreIncrementSetUser => {
      let updatedUser: User = vars.iter().find_map(|v| if let Value::SocialScoreIncrementLocalUpdatedUser(x) = v { Some(x.clone()) } else { None }).expect("Missing variable SocialScoreIncrementLocalUpdatedUser on stack");
      let userId: String = vars.iter().find_map(|v| if let Value::SocialScoreIncrementParamUserId(x) = v { Some(x.clone()) } else { None }).expect("Missing variable SocialScoreIncrementParamUserId on stack");
      StepResult::Next(vec![
        StackEntry::Retrn(State::SocialScoreIncrementDone),
        StackEntry::Value(Value::UserManagerSetParamKey(userId)),
        StackEntry::Value(Value::UserManagerSetParamItem(updatedUser)),
        StackEntry::State(State::UserManagerSetEntry),
      ])
    }
    State::SocialScoreIncrementTimeoutStart => {
      StepResult::GoTo(State::SocialScoreIncrementSelect)
    }
    State::SocialScoreIncrementUpdateUser => {
      let newRating: u64 = vars.iter().find_map(|v| if let Value::SocialScoreIncrementLocalNewRating(x) = v { Some(x.clone()) } else { None }).expect("Missing variable SocialScoreIncrementLocalNewRating on stack");
      let user: User = vars.iter().find_map(|v| if let Value::SocialScoreIncrementLocalUser(x) = v { Some(x.clone()) } else { None }).expect("Missing variable SocialScoreIncrementLocalUser on stack");
      StepResult::Next(vec![
        StackEntry::Value(Value::SocialScoreIncrementLocalUpdatedUser({ let mut tmp = (user).clone(); tmp.rating = (newRating); tmp })),
        StackEntry::State(State::SocialScoreIncrementSetUser),
      ])
    }
    State::UserManagerGetEntry => {
      StepResult::GoTo(State::UserManagerGetEntry)
    }
    State::UserManagerSetEntry => {
      StepResult::GoTo(State::UserManagerSetEntry)
    }
  }
}
