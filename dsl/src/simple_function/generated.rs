// Generated by dsl::codegen from IR
#![allow(dead_code)]
#![allow(unused_variables)]
#![allow(non_snake_case)]

#[derive(Clone, Debug, PartialEq)]
pub struct ApplicationAsyncFooMsg {
  pub a: u64,
  pub b: u64,
}

#[derive(Clone, Debug, Default, PartialEq)]
pub struct ApplicationHeap {}

#[derive(Clone, Debug, Default, PartialEq)]
pub struct GlobalHeap {
  pub binarySearchValues: Vec<u64>,
}

#[derive(Clone, Debug, Default, PartialEq)]
pub struct Heap {
  pub application: ApplicationHeap,
  pub global: GlobalHeap,
}

#[derive(Clone, Debug, PartialEq)]
pub enum State {
  Completed,
  Idle,
  ApplicationAsyncFooAwait,
  ApplicationAsyncFooEntry,
  ApplicationAsyncFooReturn,
  GlobalAddEntry,
  GlobalBinarySearchCalculateDiv,
  GlobalBinarySearchCmpLess,
  GlobalBinarySearchEntry,
  GlobalBinarySearchGoLeft,
  GlobalBinarySearchGoLeftCheckOverflow,
  GlobalBinarySearchGoRight,
  GlobalBinarySearchRecursiveCall,
  GlobalBinarySearchReturnNone,
  GlobalBinarySearchReturnFound,
  GlobalBinarySearchReturnIfEqual,
  GlobalBinarySearchReturnResult,
  GlobalDivEntry,
  GlobalFactorialEntry,
  GlobalFactorialFactorialCall,
  GlobalFactorialMultiply,
  GlobalFactorialReturn,
  GlobalFactorialReturn1,
  GlobalFactorialSubtract,
  GlobalMultEntry,
  GlobalSubEntry,
  GlobalSubAddEntry,
  GlobalSubAddFinalize,
  GlobalSubAddSubSum,
}

#[derive(Clone, Debug, PartialEq)]
pub enum Value {
  OptionU64(Option<u64>),
  U64(u64),
}

#[derive(Clone, Debug, PartialEq)]
pub enum StackEntry {
  State(State),
  // Option<usize> - local index offset back on stack
  // if it's None - no value will be binded into the local variable of the function that initiated call
  Retrn(Option<usize>),
  Value(String, Value),
  // In-place updates to the current frame (offset -> new Value)
  FrameAssign(Vec<(usize, Value)>),
}

#[derive(Clone, Debug, PartialEq)]
pub enum StepResult {
  Done,
  Next(Vec<StackEntry>),
  Sleep(u64, State),
  Write(String, State),
  GoTo(State),
  Branch { then_: State, else_: State },
  Select(Vec<State>),
  // Return can carry an optional value to be consumed by the runtime.
  Return(Value),
  ReturnVoid,
  Todo(String),
  Await(String),
}
pub fn func_args_count(e: &State) -> usize {
  match e {
    State::ApplicationAsyncFooEntry => 3,
    State::ApplicationAsyncFooAwait => 3,
    State::ApplicationAsyncFooEntry => 3,
    State::ApplicationAsyncFooReturn => 3,
    State::GlobalAddEntry => 3,
    State::GlobalAddEntry => 3,
    State::GlobalBinarySearchEntry => 6,
    State::GlobalBinarySearchCalculateDiv => 6,
    State::GlobalBinarySearchCmpLess => 6,
    State::GlobalBinarySearchEntry => 6,
    State::GlobalBinarySearchGoLeft => 6,
    State::GlobalBinarySearchGoLeftCheckOverflow => 6,
    State::GlobalBinarySearchGoRight => 6,
    State::GlobalBinarySearchRecursiveCall => 6,
    State::GlobalBinarySearchReturnNone => 6,
    State::GlobalBinarySearchReturnFound => 6,
    State::GlobalBinarySearchReturnIfEqual => 6,
    State::GlobalBinarySearchReturnResult => 6,
    State::GlobalDivEntry => 3,
    State::GlobalDivEntry => 3,
    State::GlobalFactorialEntry => 4,
    State::GlobalFactorialEntry => 4,
    State::GlobalFactorialFactorialCall => 4,
    State::GlobalFactorialMultiply => 4,
    State::GlobalFactorialReturn => 4,
    State::GlobalFactorialReturn1 => 4,
    State::GlobalFactorialSubtract => 4,
    State::GlobalMultEntry => 3,
    State::GlobalMultEntry => 3,
    State::GlobalSubEntry => 3,
    State::GlobalSubEntry => 3,
    State::GlobalSubAddEntry => 5,
    State::GlobalSubAddEntry => 5,
    State::GlobalSubAddFinalize => 5,
    State::GlobalSubAddSubSum => 5,
    State::Idle => 0,
    State::Completed => 0,
  }
}
pub fn global_step(
  state: State,
  vars: &[StackEntry],
  heap: &mut Heap,
) -> StepResult {
  match state {
    State::Completed => StepResult::Done,
    State::Idle => panic!("shoudnt be here"),
    State::ApplicationAsyncFooEntry => {
      let a: u64 = if let StackEntry::Value(_, Value::U64(x)) = &vars[0] { x.clone() } else { unreachable!() };
      let b: u64 = if let StackEntry::Value(_, Value::U64(x)) = &vars[1] { x.clone() } else { unreachable!() };
      StepResult::GoTo(State::ApplicationAsyncFooAwait)
    }
    State::ApplicationAsyncFooAwait => StepResult::GoTo(State::ApplicationAsyncFooReturn),
    State::ApplicationAsyncFooReturn => {
      let sum: u64 = if let StackEntry::Value(_, Value::U64(x)) = &vars[2] { x.clone() } else { unreachable!() };
      StepResult::Return(Value::U64(sum))
    }
    State::GlobalAddEntry => {
      let a: u64 = if let StackEntry::Value(_, Value::U64(x)) = &vars[0] { x.clone() } else { unreachable!() };
      let b: u64 = if let StackEntry::Value(_, Value::U64(x)) = &vars[1] { x.clone() } else { unreachable!() };
      let sum: u64 = if let StackEntry::Value(_, Value::U64(x)) = &vars[2] { x.clone() } else { unreachable!() };
      {
        let out = { a + b };
        StepResult::Return(Value::U64(out))
      }
    }
    State::GlobalBinarySearchEntry => {
      let e: u64 = if let StackEntry::Value(_, Value::U64(x)) = &vars[0] { x.clone() } else { unreachable!() };
      let left: u64 = if let StackEntry::Value(_, Value::U64(x)) = &vars[1] { x.clone() } else { unreachable!() };
      let right: u64 = if let StackEntry::Value(_, Value::U64(x)) = &vars[2] { x.clone() } else { unreachable!() };
      if left > right {
        StepResult::GoTo(State::GlobalBinarySearchReturnNone)
      } else {
        StepResult::GoTo(State::GlobalBinarySearchCalculateDiv)
      }
    }
    State::GlobalBinarySearchCalculateDiv => {
      let div: u64 = if let StackEntry::Value(_, Value::U64(x)) = &vars[3] { x.clone() } else { unreachable!() };
      let e: u64 = if let StackEntry::Value(_, Value::U64(x)) = &vars[0] { x.clone() } else { unreachable!() };
      let facCallRes: Option<u64> =
        if let StackEntry::Value(_, Value::OptionU64(x)) = &vars[5] { x.clone() } else { unreachable!() };
      let left: u64 = if let StackEntry::Value(_, Value::U64(x)) = &vars[1] { x.clone() } else { unreachable!() };
      let right: u64 = if let StackEntry::Value(_, Value::U64(x)) = &vars[2] { x.clone() } else { unreachable!() };
      let vByIndexDiv: u64 =
        if let StackEntry::Value(_, Value::U64(x)) = &vars[4] { x.clone() } else { unreachable!() };
      {
        let out = {
          let o_div = (left + right) / 2;
          let s = &heap.global;
          (o_div, s.binarySearchValues[o_div as usize])
        };
        let (o0, o1) = out;
        StepResult::Next(vec![
          StackEntry::FrameAssign(vec![(3, Value::U64(o0)), (4, Value::U64(o1))]),
          StackEntry::State(State::GlobalBinarySearchReturnIfEqual),
        ])
      }
    }
    State::GlobalBinarySearchCmpLess => {
      let e: u64 = if let StackEntry::Value(_, Value::U64(x)) = &vars[0] { x.clone() } else { unreachable!() };
      let vByIndexDiv: u64 =
        if let StackEntry::Value(_, Value::U64(x)) = &vars[4] { x.clone() } else { unreachable!() };
      if vByIndexDiv < e {
        StepResult::GoTo(State::GlobalBinarySearchGoRight)
      } else {
        StepResult::GoTo(State::GlobalBinarySearchGoLeftCheckOverflow)
      }
    }
    State::GlobalBinarySearchGoLeft => {
      let div: u64 = if let StackEntry::Value(_, Value::U64(x)) = &vars[3] { x.clone() } else { unreachable!() };
      StepResult::Next(vec![
        StackEntry::State(State::GlobalBinarySearchRecursiveCall),
        StackEntry::Retrn(Some(5)),
        StackEntry::Value("a".to_string(), Value::U64(div)),
        StackEntry::Value("b".to_string(), Value::U64(1u64)),
        StackEntry::Value("sub".to_string(), Value::U64(0u64)),
        StackEntry::State(State::GlobalSubEntry),
      ])
    }
    State::GlobalBinarySearchGoLeftCheckOverflow => {
      let div: u64 = if let StackEntry::Value(_, Value::U64(x)) = &vars[3] { x.clone() } else { unreachable!() };
      if div < 0u64 {
        StepResult::GoTo(State::GlobalBinarySearchReturnNone)
      } else {
        StepResult::GoTo(State::GlobalBinarySearchGoLeft)
      }
    }
    State::GlobalBinarySearchGoRight => {
      let div: u64 = if let StackEntry::Value(_, Value::U64(x)) = &vars[3] { x.clone() } else { unreachable!() };
      StepResult::Next(vec![
        StackEntry::State(State::GlobalBinarySearchRecursiveCall),
        StackEntry::Retrn(Some(6)),
        StackEntry::Value("a".to_string(), Value::U64(div)),
        StackEntry::Value("b".to_string(), Value::U64(1u64)),
        StackEntry::Value("sum".to_string(), Value::U64(0u64)),
        StackEntry::State(State::GlobalAddEntry),
      ])
    }
    State::GlobalBinarySearchRecursiveCall => {
      let e: u64 = if let StackEntry::Value(_, Value::U64(x)) = &vars[0] { x.clone() } else { unreachable!() };
      let left: u64 = if let StackEntry::Value(_, Value::U64(x)) = &vars[1] { x.clone() } else { unreachable!() };
      let right: u64 = if let StackEntry::Value(_, Value::U64(x)) = &vars[2] { x.clone() } else { unreachable!() };
      StepResult::Next(vec![
        StackEntry::State(State::GlobalBinarySearchReturnResult),
        StackEntry::Retrn(Some(2)),
        StackEntry::Value("e".to_string(), Value::U64(e)),
        StackEntry::Value("left".to_string(), Value::U64(left)),
        StackEntry::Value("right".to_string(), Value::U64(right)),
        StackEntry::Value("div".to_string(), Value::U64(0u64)),
        StackEntry::Value("v_by_index_div".to_string(), Value::U64(0u64)),
        StackEntry::Value("fac_call_res".to_string(), Value::OptionU64(None)),
        StackEntry::State(State::GlobalBinarySearchEntry),
      ])
    }
    State::GlobalBinarySearchReturnNone => StepResult::Return(Value::OptionU64(None)),
    State::GlobalBinarySearchReturnFound => {
      let div: u64 = if let StackEntry::Value(_, Value::U64(x)) = &vars[3] { x.clone() } else { unreachable!() };
      StepResult::Return(Value::OptionU64(Some(div)))
    }
    State::GlobalBinarySearchReturnIfEqual => {
      let e: u64 = if let StackEntry::Value(_, Value::U64(x)) = &vars[0] { x.clone() } else { unreachable!() };
      let vByIndexDiv: u64 =
        if let StackEntry::Value(_, Value::U64(x)) = &vars[4] { x.clone() } else { unreachable!() };
      if vByIndexDiv == e {
        StepResult::GoTo(State::GlobalBinarySearchReturnFound)
      } else {
        StepResult::GoTo(State::GlobalBinarySearchCmpLess)
      }
    }
    State::GlobalBinarySearchReturnResult => {
      let facCallRes: Option<u64> =
        if let StackEntry::Value(_, Value::OptionU64(x)) = &vars[5] { x.clone() } else { unreachable!() };
      StepResult::Return(Value::OptionU64(facCallRes))
    }
    State::GlobalDivEntry => {
      let a: u64 = if let StackEntry::Value(_, Value::U64(x)) = &vars[0] { x.clone() } else { unreachable!() };
      let b: u64 = if let StackEntry::Value(_, Value::U64(x)) = &vars[1] { x.clone() } else { unreachable!() };
      let div: u64 = if let StackEntry::Value(_, Value::U64(x)) = &vars[2] { x.clone() } else { unreachable!() };
      {
        let out = { a / b };
        StepResult::Return(Value::U64(out))
      }
    }
    State::GlobalFactorialEntry => {
      let n: u64 = if let StackEntry::Value(_, Value::U64(x)) = &vars[0] { x.clone() } else { unreachable!() };
      if n == 1u64 {
        StepResult::GoTo(State::GlobalFactorialReturn1)
      } else {
        StepResult::GoTo(State::GlobalFactorialSubtract)
      }
    }
    State::GlobalFactorialFactorialCall => {
      let subtractRes: u64 =
        if let StackEntry::Value(_, Value::U64(x)) = &vars[2] { x.clone() } else { unreachable!() };
      StepResult::Next(vec![
        StackEntry::State(State::GlobalFactorialMultiply),
        StackEntry::Retrn(Some(4)),
        StackEntry::Value("n".to_string(), Value::U64(subtractRes)),
        StackEntry::Value("fac_call_res".to_string(), Value::U64(0u64)),
        StackEntry::Value("subtract_res".to_string(), Value::U64(0u64)),
        StackEntry::Value("result".to_string(), Value::U64(0u64)),
        StackEntry::State(State::GlobalFactorialEntry),
      ])
    }
    State::GlobalFactorialMultiply => {
      let facCallRes: u64 = if let StackEntry::Value(_, Value::U64(x)) = &vars[1] { x.clone() } else { unreachable!() };
      let n: u64 = if let StackEntry::Value(_, Value::U64(x)) = &vars[0] { x.clone() } else { unreachable!() };
      StepResult::Next(vec![
        StackEntry::State(State::GlobalFactorialReturn),
        StackEntry::Retrn(Some(2)),
        StackEntry::Value("a".to_string(), Value::U64(n)),
        StackEntry::Value("b".to_string(), Value::U64(facCallRes)),
        StackEntry::Value("mult".to_string(), Value::U64(0u64)),
        StackEntry::State(State::GlobalMultEntry),
      ])
    }
    State::GlobalFactorialReturn => {
      let result: u64 = if let StackEntry::Value(_, Value::U64(x)) = &vars[3] { x.clone() } else { unreachable!() };
      StepResult::Return(Value::U64(result))
    }
    State::GlobalFactorialReturn1 => StepResult::Return(Value::U64(1u64)),
    State::GlobalFactorialSubtract => {
      let n: u64 = if let StackEntry::Value(_, Value::U64(x)) = &vars[0] { x.clone() } else { unreachable!() };
      StepResult::Next(vec![
        StackEntry::State(State::GlobalFactorialFactorialCall),
        StackEntry::Retrn(Some(3)),
        StackEntry::Value("a".to_string(), Value::U64(n)),
        StackEntry::Value("b".to_string(), Value::U64(1u64)),
        StackEntry::Value("sub".to_string(), Value::U64(0u64)),
        StackEntry::State(State::GlobalSubEntry),
      ])
    }
    State::GlobalMultEntry => {
      let a: u64 = if let StackEntry::Value(_, Value::U64(x)) = &vars[0] { x.clone() } else { unreachable!() };
      let b: u64 = if let StackEntry::Value(_, Value::U64(x)) = &vars[1] { x.clone() } else { unreachable!() };
      let mult: u64 = if let StackEntry::Value(_, Value::U64(x)) = &vars[2] { x.clone() } else { unreachable!() };
      {
        let out = { a * b };
        StepResult::Return(Value::U64(out))
      }
    }
    State::GlobalSubEntry => {
      let a: u64 = if let StackEntry::Value(_, Value::U64(x)) = &vars[0] { x.clone() } else { unreachable!() };
      let b: u64 = if let StackEntry::Value(_, Value::U64(x)) = &vars[1] { x.clone() } else { unreachable!() };
      let sub: u64 = if let StackEntry::Value(_, Value::U64(x)) = &vars[2] { x.clone() } else { unreachable!() };
      {
        let out = {
          let out = a - b;
          out
        };
        StepResult::Return(Value::U64(out))
      }
    }
    State::GlobalSubAddEntry => {
      let a: u64 = if let StackEntry::Value(_, Value::U64(x)) = &vars[0] { x.clone() } else { unreachable!() };
      let b: u64 = if let StackEntry::Value(_, Value::U64(x)) = &vars[1] { x.clone() } else { unreachable!() };
      let c: u64 = if let StackEntry::Value(_, Value::U64(x)) = &vars[2] { x.clone() } else { unreachable!() };
      StepResult::Next(vec![
        StackEntry::State(State::GlobalSubAddSubSum),
        StackEntry::Retrn(Some(3)),
        StackEntry::Value("a".to_string(), Value::U64(a)),
        StackEntry::Value("b".to_string(), Value::U64(b)),
        StackEntry::Value("sum".to_string(), Value::U64(0u64)),
        StackEntry::State(State::GlobalAddEntry),
      ])
    }
    State::GlobalSubAddFinalize => {
      let subABC: u64 = if let StackEntry::Value(_, Value::U64(x)) = &vars[4] { x.clone() } else { unreachable!() };
      StepResult::Return(Value::U64(subABC))
    }
    State::GlobalSubAddSubSum => {
      let c: u64 = if let StackEntry::Value(_, Value::U64(x)) = &vars[2] { x.clone() } else { unreachable!() };
      let sumAB: u64 = if let StackEntry::Value(_, Value::U64(x)) = &vars[3] { x.clone() } else { unreachable!() };
      StepResult::Next(vec![
        StackEntry::State(State::GlobalSubAddFinalize),
        StackEntry::Retrn(Some(2)),
        StackEntry::Value("a".to_string(), Value::U64(sumAB)),
        StackEntry::Value("b".to_string(), Value::U64(c)),
        StackEntry::Value("sub".to_string(), Value::U64(0u64)),
        StackEntry::State(State::GlobalSubEntry),
      ])
    }
  }
}

// Registry: function key -> (prepare_from_values, result_to_value)
pub type PrepareFn = fn(Vec<Value>) -> Vec<StackEntry>;
pub type ResultFn = fn(&[StackEntry]) -> Value;

pub fn application_prepare_asyncFoo(
  a: u64,
  b: u64,
) -> (Vec<StackEntry>, Heap) {
  let mut stack: Vec<StackEntry> = Vec::new();
  stack.push(StackEntry::Value("ret".to_string(), Value::U64(0u64)));
  stack.push(StackEntry::Retrn(Some(1)));
  stack.push(StackEntry::Value("a".to_string(), Value::U64(a)));
  stack.push(StackEntry::Value("b".to_string(), Value::U64(b)));
  stack.push(StackEntry::Value("sum".to_string(), Value::U64(0u64)));
  stack.push(StackEntry::State(State::ApplicationAsyncFooEntry));
  let heap = Heap::default();
  (stack, heap)
}

pub fn application_result_asyncFoo(stack: &[StackEntry]) -> u64 {
  match stack.last() {
    Some(StackEntry::Value(_, Value::U64(v))) => v.clone(),
    _ => unreachable!("result not found on stack"),
  }
}

fn application_prepare_asyncFoo_from_values(args: Vec<Value>) -> Vec<StackEntry> {
  let a: u64 =
    if let Value::U64(x) = &args[0] { x.clone() } else { unreachable!("invalid args for application.async_foo") };
  let b: u64 =
    if let Value::U64(x) = &args[1] { x.clone() } else { unreachable!("invalid args for application.async_foo") };
  let (stack, _heap) = application_prepare_asyncFoo(a, b);
  stack
}

fn application_result_asyncFoo_value(stack: &[StackEntry]) -> Value {
  Value::U64(application_result_asyncFoo(stack))
}

pub fn global_prepare_add(
  a: u64,
  b: u64,
) -> (Vec<StackEntry>, Heap) {
  let mut stack: Vec<StackEntry> = Vec::new();
  stack.push(StackEntry::Value("ret".to_string(), Value::U64(0u64)));
  stack.push(StackEntry::Retrn(Some(1)));
  stack.push(StackEntry::Value("a".to_string(), Value::U64(a)));
  stack.push(StackEntry::Value("b".to_string(), Value::U64(b)));
  stack.push(StackEntry::Value("sum".to_string(), Value::U64(0u64)));
  stack.push(StackEntry::State(State::GlobalAddEntry));
  let heap = Heap::default();
  (stack, heap)
}

pub fn global_result_add(stack: &[StackEntry]) -> u64 {
  match stack.last() {
    Some(StackEntry::Value(_, Value::U64(v))) => v.clone(),
    _ => unreachable!("result not found on stack"),
  }
}

fn global_prepare_add_from_values(args: Vec<Value>) -> Vec<StackEntry> {
  let a: u64 = if let Value::U64(x) = &args[0] { x.clone() } else { unreachable!("invalid args for global.add") };
  let b: u64 = if let Value::U64(x) = &args[1] { x.clone() } else { unreachable!("invalid args for global.add") };
  let (stack, _heap) = global_prepare_add(a, b);
  stack
}

fn global_result_add_value(stack: &[StackEntry]) -> Value {
  Value::U64(global_result_add(stack))
}

pub fn global_prepare_binarySearch(
  e: u64,
  left: u64,
  right: u64,
) -> (Vec<StackEntry>, Heap) {
  let mut stack: Vec<StackEntry> = Vec::new();
  stack.push(StackEntry::Value("ret".to_string(), Value::OptionU64(None)));
  stack.push(StackEntry::Retrn(Some(1)));
  stack.push(StackEntry::Value("e".to_string(), Value::U64(e)));
  stack.push(StackEntry::Value("left".to_string(), Value::U64(left)));
  stack.push(StackEntry::Value("right".to_string(), Value::U64(right)));
  stack.push(StackEntry::Value("div".to_string(), Value::U64(0u64)));
  stack.push(StackEntry::Value("v_by_index_div".to_string(), Value::U64(0u64)));
  stack.push(StackEntry::Value("fac_call_res".to_string(), Value::OptionU64(None)));
  stack.push(StackEntry::State(State::GlobalBinarySearchEntry));
  let heap = Heap::default();
  (stack, heap)
}

pub fn global_result_binarySearch(stack: &[StackEntry]) -> Option<u64> {
  match stack.last() {
    Some(StackEntry::Value(_, Value::OptionU64(v))) => v.clone(),
    _ => unreachable!("result not found on stack"),
  }
}

fn global_prepare_binarySearch_from_values(args: Vec<Value>) -> Vec<StackEntry> {
  let e: u64 =
    if let Value::U64(x) = &args[0] { x.clone() } else { unreachable!("invalid args for global.binary_search") };
  let left: u64 =
    if let Value::U64(x) = &args[1] { x.clone() } else { unreachable!("invalid args for global.binary_search") };
  let right: u64 =
    if let Value::U64(x) = &args[2] { x.clone() } else { unreachable!("invalid args for global.binary_search") };
  let (stack, _heap) = global_prepare_binarySearch(e, left, right);
  stack
}

fn global_result_binarySearch_value(stack: &[StackEntry]) -> Value {
  Value::OptionU64(global_result_binarySearch(stack))
}

pub fn global_prepare_div(
  a: u64,
  b: u64,
) -> (Vec<StackEntry>, Heap) {
  let mut stack: Vec<StackEntry> = Vec::new();
  stack.push(StackEntry::Value("ret".to_string(), Value::U64(0u64)));
  stack.push(StackEntry::Retrn(Some(1)));
  stack.push(StackEntry::Value("a".to_string(), Value::U64(a)));
  stack.push(StackEntry::Value("b".to_string(), Value::U64(b)));
  stack.push(StackEntry::Value("div".to_string(), Value::U64(0u64)));
  stack.push(StackEntry::State(State::GlobalDivEntry));
  let heap = Heap::default();
  (stack, heap)
}

pub fn global_result_div(stack: &[StackEntry]) -> u64 {
  match stack.last() {
    Some(StackEntry::Value(_, Value::U64(v))) => v.clone(),
    _ => unreachable!("result not found on stack"),
  }
}

fn global_prepare_div_from_values(args: Vec<Value>) -> Vec<StackEntry> {
  let a: u64 = if let Value::U64(x) = &args[0] { x.clone() } else { unreachable!("invalid args for global.div") };
  let b: u64 = if let Value::U64(x) = &args[1] { x.clone() } else { unreachable!("invalid args for global.div") };
  let (stack, _heap) = global_prepare_div(a, b);
  stack
}

fn global_result_div_value(stack: &[StackEntry]) -> Value {
  Value::U64(global_result_div(stack))
}

pub fn global_prepare_factorial(n: u64) -> (Vec<StackEntry>, Heap) {
  let mut stack: Vec<StackEntry> = Vec::new();
  stack.push(StackEntry::Value("ret".to_string(), Value::U64(0u64)));
  stack.push(StackEntry::Retrn(Some(1)));
  stack.push(StackEntry::Value("n".to_string(), Value::U64(n)));
  stack.push(StackEntry::Value("fac_call_res".to_string(), Value::U64(0u64)));
  stack.push(StackEntry::Value("subtract_res".to_string(), Value::U64(0u64)));
  stack.push(StackEntry::Value("result".to_string(), Value::U64(0u64)));
  stack.push(StackEntry::State(State::GlobalFactorialEntry));
  let heap = Heap::default();
  (stack, heap)
}

pub fn global_result_factorial(stack: &[StackEntry]) -> u64 {
  match stack.last() {
    Some(StackEntry::Value(_, Value::U64(v))) => v.clone(),
    _ => unreachable!("result not found on stack"),
  }
}

fn global_prepare_factorial_from_values(args: Vec<Value>) -> Vec<StackEntry> {
  let n: u64 = if let Value::U64(x) = &args[0] { x.clone() } else { unreachable!("invalid args for global.factorial") };
  let (stack, _heap) = global_prepare_factorial(n);
  stack
}

fn global_result_factorial_value(stack: &[StackEntry]) -> Value {
  Value::U64(global_result_factorial(stack))
}

pub fn global_prepare_mult(
  a: u64,
  b: u64,
) -> (Vec<StackEntry>, Heap) {
  let mut stack: Vec<StackEntry> = Vec::new();
  stack.push(StackEntry::Value("ret".to_string(), Value::U64(0u64)));
  stack.push(StackEntry::Retrn(Some(1)));
  stack.push(StackEntry::Value("a".to_string(), Value::U64(a)));
  stack.push(StackEntry::Value("b".to_string(), Value::U64(b)));
  stack.push(StackEntry::Value("mult".to_string(), Value::U64(0u64)));
  stack.push(StackEntry::State(State::GlobalMultEntry));
  let heap = Heap::default();
  (stack, heap)
}

pub fn global_result_mult(stack: &[StackEntry]) -> u64 {
  match stack.last() {
    Some(StackEntry::Value(_, Value::U64(v))) => v.clone(),
    _ => unreachable!("result not found on stack"),
  }
}

fn global_prepare_mult_from_values(args: Vec<Value>) -> Vec<StackEntry> {
  let a: u64 = if let Value::U64(x) = &args[0] { x.clone() } else { unreachable!("invalid args for global.mult") };
  let b: u64 = if let Value::U64(x) = &args[1] { x.clone() } else { unreachable!("invalid args for global.mult") };
  let (stack, _heap) = global_prepare_mult(a, b);
  stack
}

fn global_result_mult_value(stack: &[StackEntry]) -> Value {
  Value::U64(global_result_mult(stack))
}

pub fn global_prepare_sub(
  a: u64,
  b: u64,
) -> (Vec<StackEntry>, Heap) {
  let mut stack: Vec<StackEntry> = Vec::new();
  stack.push(StackEntry::Value("ret".to_string(), Value::U64(0u64)));
  stack.push(StackEntry::Retrn(Some(1)));
  stack.push(StackEntry::Value("a".to_string(), Value::U64(a)));
  stack.push(StackEntry::Value("b".to_string(), Value::U64(b)));
  stack.push(StackEntry::Value("sub".to_string(), Value::U64(0u64)));
  stack.push(StackEntry::State(State::GlobalSubEntry));
  let heap = Heap::default();
  (stack, heap)
}

pub fn global_result_sub(stack: &[StackEntry]) -> u64 {
  match stack.last() {
    Some(StackEntry::Value(_, Value::U64(v))) => v.clone(),
    _ => unreachable!("result not found on stack"),
  }
}

fn global_prepare_sub_from_values(args: Vec<Value>) -> Vec<StackEntry> {
  let a: u64 = if let Value::U64(x) = &args[0] { x.clone() } else { unreachable!("invalid args for global.sub") };
  let b: u64 = if let Value::U64(x) = &args[1] { x.clone() } else { unreachable!("invalid args for global.sub") };
  let (stack, _heap) = global_prepare_sub(a, b);
  stack
}

fn global_result_sub_value(stack: &[StackEntry]) -> Value {
  Value::U64(global_result_sub(stack))
}

pub fn global_prepare_subAdd(
  a: u64,
  b: u64,
  c: u64,
) -> (Vec<StackEntry>, Heap) {
  let mut stack: Vec<StackEntry> = Vec::new();
  stack.push(StackEntry::Value("ret".to_string(), Value::U64(0u64)));
  stack.push(StackEntry::Retrn(Some(1)));
  stack.push(StackEntry::Value("a".to_string(), Value::U64(a)));
  stack.push(StackEntry::Value("b".to_string(), Value::U64(b)));
  stack.push(StackEntry::Value("c".to_string(), Value::U64(c)));
  stack.push(StackEntry::Value("sumAB".to_string(), Value::U64(0u64)));
  stack.push(StackEntry::Value("subABC".to_string(), Value::U64(0u64)));
  stack.push(StackEntry::State(State::GlobalSubAddEntry));
  let heap = Heap::default();
  (stack, heap)
}

pub fn global_result_subAdd(stack: &[StackEntry]) -> u64 {
  match stack.last() {
    Some(StackEntry::Value(_, Value::U64(v))) => v.clone(),
    _ => unreachable!("result not found on stack"),
  }
}

fn global_prepare_subAdd_from_values(args: Vec<Value>) -> Vec<StackEntry> {
  let a: u64 = if let Value::U64(x) = &args[0] { x.clone() } else { unreachable!("invalid args for global.subAdd") };
  let b: u64 = if let Value::U64(x) = &args[1] { x.clone() } else { unreachable!("invalid args for global.subAdd") };
  let c: u64 = if let Value::U64(x) = &args[2] { x.clone() } else { unreachable!("invalid args for global.subAdd") };
  let (stack, _heap) = global_prepare_subAdd(a, b, c);
  stack
}

fn global_result_subAdd_value(stack: &[StackEntry]) -> Value {
  Value::U64(global_result_subAdd(stack))
}

pub fn get_prepare_fn(key: &str) -> PrepareFn {
  match key {
    "application.async_foo" => application_prepare_asyncFoo_from_values,
    "global.add" => global_prepare_add_from_values,
    "global.binary_search" => global_prepare_binarySearch_from_values,
    "global.div" => global_prepare_div_from_values,
    "global.factorial" => global_prepare_factorial_from_values,
    "global.mult" => global_prepare_mult_from_values,
    "global.sub" => global_prepare_sub_from_values,
    "global.subAdd" => global_prepare_subAdd_from_values,
    _ => panic!("shouldnt be here"),
  }
}

pub fn get_result_fn(key: &str) -> ResultFn {
  match key {
    "application.async_foo" => application_result_asyncFoo_value,
    "global.add" => global_result_add_value,
    "global.binary_search" => global_result_binarySearch_value,
    "global.div" => global_result_div_value,
    "global.factorial" => global_result_factorial_value,
    "global.mult" => global_result_mult_value,
    "global.sub" => global_result_sub_value,
    "global.subAdd" => global_result_subAdd_value,
    _ => panic!("shouldnt be here"),
  }
}
